@mixin breakpoint($breakpoint) {
    @media screen and (min-width: map-get($kms-breakpoints, $breakpoint)) {
        @content;
    }
}

@mixin generateClassBreakpoints($breakpoints...) {
    //Provide styling for base modifier.
    @content;
    //If arguments proved generate media queries based only on those
    @if (length($list: $breakpoints) != 0) {
        @each $breakpoint in $breakpoints {
            @if map-has-key($map: $kms-breakpoints, $key: $breakpoint) {
                 @at-root #{&}\@#{$breakpoint} {
                     @media screen and (min-width: map-get($kms-breakpoints, $breakpoint)) {
                         @content;
                     }
                 }
            }
        }
    } 
    //Else generate media queries for all breakpoints in $il-breakpoints
    @else {
        @at-root #{&}\@to-#{nth(map-keys($kms-breakpoints), 1)} {
            @media screen and (max-width: nth(map-values($kms-breakpoints), 1)) {
                @content;
            }
        }
        @each $breakpoint, $size in $kms-breakpoints {
            @at-root #{&}\@#{$breakpoint} {
                @media screen and (min-width: $size) {
                    @content;
                }
            }
        }
    }
}

@mixin isAnimated() {
    transition-property: opacity, transform;
    transition-duration: var(--unhide-duration);
    opacity: 1;
    transform: translateY(0);

    @for $i from 1 through 10 {
        &:nth-child(1n + #{$i}):not(:first-child) {
            transition-delay: calc(#{$i} * var(--delay-duration));
        }
    }
}